{"version":3,"file":"static/js/724.8fba090e.chunk.js","mappings":"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","sources":["components/ExcelTable.js","components/Modal.js","components/SupplierAssessment.js","components/Upload.js","lib/ReadExcelFile.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { useTable } from 'react-table'\r\nimport { Resizable } from 'react-resizable' // Import Resizable from react-resizable\r\n\r\nconst EditableCell = ({ cell: { value }, row: { index }, column: { id, maxWidth }, updateData }) => {\r\n  const [editable, setEditable] = useState(false)\r\n  const [cellValue, setCellValue] = useState(value)\r\n  const textareaRef = useRef(null)\r\n\r\n  const handleDoubleClick = () => {\r\n    setEditable(true)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    setEditable(false)\r\n    updateData(index, id, cellValue)\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setCellValue(e.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Auto-adjust textarea height based on content\r\n    if (editable && textareaRef.current) {\r\n      textareaRef.current.style.height = 'auto'\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`\r\n    }\r\n  }, [editable, cellValue])\r\n\r\n  const textareaStyle = {\r\n    // width: `${maxWidth}px`, // Set the fixed width\r\n    resize: 'none', // Disable textarea resizing\r\n    overflow: 'hidden' // Hide any content that exceeds the height\r\n  }\r\n\r\n  return (\r\n    <textarea\r\n      className='w-full'\r\n      ref={textareaRef}\r\n      value={cellValue}\r\n      readOnly={!editable}\r\n      onClick={handleDoubleClick}\r\n      onBlur={handleBlur}\r\n      onChange={handleChange}\r\n      style={textareaStyle}\r\n      key={`cell-${index}-${id}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst ResizableHeader = ({ column }) => {\r\n  const { getHeaderProps, getResizeProps } = column\r\n  const isResizable = getResizeProps !== undefined && getResizeProps().style !== undefined\r\n\r\n  return (\r\n    <div {...getHeaderProps()} {...(isResizable ? getResizeProps() : {})}>\r\n      {column.render('Header')}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Table = ({ columns, data, updateData, mergedCells }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable({\r\n    columns,\r\n    data\r\n  })\r\n\r\n  const isMergedCell = (rowIndex, columnId) => {\r\n    return (\r\n      mergedCells &&\r\n      mergedCells.some(\r\n        (cell) =>\r\n          rowIndex >= cell.start.row &&\r\n          rowIndex <= cell.end.row &&\r\n          columnId >= cell.start.column &&\r\n          columnId <= cell.end.column\r\n      )\r\n    )\r\n  }\r\n\r\n  return (\r\n    <table id=\"exportTable\" {...getTableProps()} style={{ border: '1px solid black' }}>\r\n      <thead>\r\n        {/* {headerGroups.map((headerGroup, index) => (\r\n          <Resizable\r\n            key={`header-${headerGroup.id}`}\r\n            width={headerGroup.headers.length > 0 ? headerGroup.headers[0].width : 0}\r\n            height={40}\r\n            onResize={(e, { size }) => {\r\n              const newWidth = size.width\r\n              headerGroup.headers.forEach((column) => {\r\n                column.width = newWidth\r\n              })\r\n            }}\r\n          >\r\n            <div>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps()}\r\n                  style={{\r\n                    borderBottom: '2px solid black',\r\n                    backgroundColor: isMergedCell(0, column.id) ? 'lightgray' : 'white', // Adjust styles\r\n                    width: column.width\r\n                  }}\r\n                  key={`header-${column.id}`}\r\n                >\r\n                  <ResizableHeader column={column} />\r\n                </th>\r\n              ))}\r\n            </div>\r\n          </Resizable>\r\n        ))} */}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, rowIndex) => {\r\n          prepareRow(row)\r\n          return (\r\n            <tr {...row.getRowProps()} key={`row-${row.id}`}>\r\n              {row.cells.map((cell, columnIndex) => (\r\n                <td\r\n                  {...cell.getCellProps()}\r\n                  style={{\r\n                    border: '1px solid black',\r\n                    backgroundColor: isMergedCell(rowIndex, cell.column.id) ? 'lightgray' : 'white' // Adjust styles\r\n                  }}\r\n                  key={`cell-${rowIndex}-${cell.column.id}`}\r\n                >\r\n                  {\r\n                    <EditableCell cell={cell} row={row} column={cell.column} updateData={updateData} />\r\n                  }\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport FileViewer from 'react-file-viewer'\r\n\r\nconst Modal = {\r\n  DeleteModal: ({ handleConfirmDelete, handleCloseModal }) => (\r\n    <div className=\"fixed inset-0 z-10 overflow-y-auto\">\r\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n        </div>\r\n\r\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\r\n      &#8203;\r\n        </span>\r\n\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n          {/* Modal content */}\r\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n            <div className=\"sm:flex sm:items-start\">\r\n              <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                <h3 className=\"text-lg font-medium text-gray-900\">Confirm Deletion</h3>\r\n                <div className=\"mt-2\">\r\n                  <p className=\"text-sm text-gray-500\">\r\n                Are you sure you want to delete this item?\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleConfirmDelete}\r\n              className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm\"\r\n            >\r\n          Confirm\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\r\n            >\r\n          Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ),\r\n  PreviewModal: ({ handleDownloadFile, handleCloseModal, ext, path, file }) => (\r\n    <div className=\"fixed inset-0 z-10 overflow-y-auto\">\r\n      <div className=\"flex items-end justify-center min-h-screen h-40 pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\" onClick={handleCloseModal}></div>\r\n        </div>\r\n\r\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\r\n      &#8203;\r\n        </span>\r\n\r\n        <div className=\"inline-block align-bottom bg-white rounded-lg text-left shadow-xl transform transition-all sm:my-8 sm:align-middle w-[90vh]\">\r\n          {/* Modal content */}\r\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 !important\">\r\n            <FileViewer\r\n              fileType={ext}\r\n              filePath={path}\r\n            />\r\n          </div>\r\n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCloseModal}\r\n              className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\r\n            >\r\n          Cancel\r\n            </button>\r\n\r\n            <a\r\n              href={`http://13.213.6.180:8009/milestone/api/v1/file/download/${file}`}\r\n              className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\r\n            >\r\n          Download\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Modal\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Table from './ExcelTable'\r\nimport { ReadExcelData } from '../lib/ReadExcelFile'\r\nimport * as XLSX from 'xlsx'\r\nimport { saveAs } from 'file-saver'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport FileUploadComponent from './Upload'\r\nimport httpClientRequest from '../lib/httpClientRequest'\r\nimport FilePreview from './FilePreview'\r\nimport { decryptFromStorage, encryptAndStore } from '../lib/SecureStorage'\r\n\r\nexport default function SupplierAssessment () {\r\n  const [excelData, setExcelData] = useState(null)\r\n  const [excelHtml, setExcelHtml] = useState(null)\r\n  const [cellStyles, setCellStyles] = useState(null)\r\n  const [upload, setUpload] = useState(false)\r\n  const [themeplateData, setThemeplateData] = useState(null)\r\n  const [state, setState] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetchThemeplate()\r\n  }, [])\r\n\r\n  const fetchThemeplate = async () => {\r\n    setState(true)\r\n    const theme = await httpClientRequest.get('themeplate')\r\n    setThemeplateData(theme)\r\n    setState(false)\r\n  }\r\n\r\n  const handleFileChange = async (file) => {\r\n    if (file) {\r\n      setUpload(true)\r\n      const data = await ReadExcelData(file)\r\n      setExcelData(data.jsonData)\r\n      console.log(data.jsonData)\r\n      setExcelHtml(data.html)\r\n      setCellStyles(data.cellStyles)\r\n    }\r\n  }\r\n\r\n  const updateData = (rowIndex, columnId, value) => {\r\n    const newData = [...excelData]\r\n    newData[rowIndex][columnId] = value\r\n    setExcelData(newData)\r\n  }\r\n\r\n  const s2ab = (s) => {\r\n    const buf = new ArrayBuffer(s.length)\r\n    const view = new Uint8Array(buf)\r\n    for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF\r\n    return buf\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    if (excelData) {\r\n      const ws = XLSX.utils.aoa_to_sheet([...excelData])\r\n      console.log(excelData)\r\n      const rowCount = excelData.length + 1\r\n      for (let rowIndex = 1; rowIndex <= rowCount; rowIndex++) {\r\n        for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\r\n          const cellAddress = XLSX.utils.encode_cell({ r: rowIndex, c: columnIndex })\r\n          ws[cellAddress] = ws[cellAddress] || {}\r\n          ws[cellAddress].s = ws[cellAddress].s || {}\r\n          ws[cellAddress].s.wrapText = true\r\n        }\r\n      }\r\n\r\n      const colWidths = columns.map((_) => ({ width: 25 }))\r\n      ws['!cols'] = colWidths\r\n      console.log(ws)\r\n      const wb = XLSX.utils.book_new()\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n\r\n      const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' })\r\n\r\n      const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' })\r\n      // saveAs(blob, 'edited_data.xlsx')\r\n      const formData = new FormData()\r\n      formData.append('file', blob, 'edited_data.xlsx')\r\n\r\n      try {\r\n        const response = await axios.post('http://13.213.6.180:8009/milestone/api/v1/file/upload?docType=themeplate', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        })\r\n\r\n        if (response.data?.filename) {\r\n          const user = decryptFromStorage('user')\r\n          const data = JSON.stringify({\r\n            user_id: user.id,\r\n            themeplate: response.data.filename\r\n          })\r\n          const result = await httpClientRequest.post('themeplate', data)\r\n          console.log(result)\r\n          if (result.is_success === true) {\r\n            alert(result.message)\r\n            setExcelData(null)\r\n            setUpload(false)\r\n            fetchThemeplate()\r\n          }\r\n        }\r\n\r\n        console.log('File uploaded successfully', response.data)\r\n      // Handle success\r\n      } catch (error) {\r\n        console.error('Error uploading file:', error)\r\n      // Handle error\r\n      }\r\n    }\r\n  }\r\n\r\n  const columns = excelData && excelData[0] ? Object.keys(excelData[0]).map((key) => ({ Header: key, accessor: key })) : []\r\n\r\n  const exportToExcel = () => {\r\n    if (excelData) {\r\n      const table = document.getElementById('exportTable')\r\n      const book = XLSX.utils.table_to_book(table, { sheet: 'Format' })\r\n      const ws = book.Sheets.Format\r\n\r\n      // Apply cell styles\r\n      for (const cellAddress in cellStyles) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (cellStyles.hasOwnProperty(cellAddress)) {\r\n          ws[cellAddress] = ws[cellAddress] || {}\r\n          ws[cellAddress].s = cellStyles[cellAddress]\r\n          ws[cellAddress].s.wrapText = true\r\n        }\r\n      }\r\n\r\n      console.log(columns)\r\n      const colWidths = columns.map((_) => ({ width: 30 }))\r\n      ws['!cols'] = colWidths\r\n\r\n      console.log(cellStyles)\r\n      console.log(ws['!cols'])\r\n\r\n      const wbout = XLSX.write(book, { bookType: 'xlsx', type: 'binary' })\r\n\r\n      const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' })\r\n      saveAs(blob, 'edited_data.xlsx')\r\n    }\r\n  }\r\n\r\n  const deleteThemeplate = async (id) => {\r\n    const result = await httpClientRequest.delete(`themeplate?id=${id}`)\r\n    console.log(result)\r\n    if (result.is_success === true) {\r\n      alert(result.message)\r\n      fetchThemeplate()\r\n    }\r\n  }\r\n\r\n  const approveThemeplate = async (id, status) => {\r\n    const result = await httpClientRequest.put(`themeplate?id=${id}`, { status })\r\n    console.log(result)\r\n    if (result.is_success === true) {\r\n      alert(result.message)\r\n      fetchThemeplate()\r\n    }\r\n  }\r\n\r\n  const cancelSave = () => {\r\n    fetchThemeplate()\r\n    setExcelData(null)\r\n    setUpload(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-around h-full w-full bg-secondary p-5\">\r\n      <div className=\"border p-4 w-1/2 flex-1 rounded-md bg-primary\">\r\n        <div className='flex justify-between items-center'>\r\n          <h2 className=\"text-lg font-semibold mb-4\">Assessment Themeplates</h2>\r\n          <FileUploadComponent onFileSelect={handleFileChange} title=\"Upload Assessment Format\"/>\r\n        </div>\r\n        {/* <input type=\"file\" onChange={handleFileChange} /> */}\r\n\r\n        {\r\n          excelData && upload && (<div className=\"w-full mt-5 h-[50vh] text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 p-5 gap-2 flex flex-col overflow-y-auto overflow-x-auto scrollbar\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">New Themeplates</h2>\r\n            <Table columns={columns} data={excelData} updateData={updateData} />\r\n            <div className='flex self-end'>\r\n              <button onClick={() => cancelSave()} type=\"button\" className=\"text-gray-900 bg-red-500 border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700 w-[10rem] self-end\">Cancel</button>\r\n              <button onClick={() => handleSave()} type=\"button\" className=\"text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700 w-[10rem] self-end\">Save Themeplate</button>\r\n            </div>\r\n          </div>\r\n          )}\r\n\r\n        {\r\n          !excelData && !upload && (\r\n            <div className=\"w-full mt-5 h-[50vh] text-sm text-left rtl:text-right text-gray-500 bg-primary dark:text-gray-400 p-5 gap-2 flex flex-col overflow-y-auto overflow-x-auto scrollbar\">\r\n              <table className=\"w-full  text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\r\n                <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"border p-2\">Themeplate</th>\r\n                    <th scope=\"col\" className=\"border p-2\">Owner</th>\r\n                    <th scope=\"col\" className=\"border p-2\">Status</th>\r\n                    <th scope=\"col\" className=\"border p-2\">Date Created</th>\r\n                    <th scope=\"col\" className=\"border p-2\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {themeplateData?.data?.length > 0 && themeplateData.data.map((item, index) => (\r\n                    <tr key={index} className='hover:bg-secondary cursor-pointer'>\r\n                      <td className=\"border p-2\">\r\n                        <a className='text-textPrimary hover:underline' href={`http://13.213.6.180:8009/milestone/api/v1/file/read/${item.themplate}?docType=themeplate`}>{item.themplate}</a>\r\n                      </td>\r\n                      <td className=\"border p-2\">{item.user_id}</td>\r\n                      <td className=\"border p-2\">{item.status}</td>\r\n                      <td className=\"border p-2\">{item.created_at}</td>\r\n                      <td className=\" border\">\r\n                        {\r\n                          item.status === 'Approved' && (\r\n                            <a href=\"#\" className=\"font-medium text-green-600 dark:text-blue-500 hover:underline p-3\">\r\n                            Send To Supplier\r\n                            </a>\r\n                          )\r\n                        }\r\n                        {\r\n                          item.status === 'Pending' && (\r\n                            <a onClick={() => approveThemeplate(item.id, 'Approved')} href=\"#\" className=\"font-medium text-textPrimary dark:text-blue-500 hover:underline p-3\">\r\n                            Approve\r\n                            </a>\r\n                          )\r\n                        }\r\n                        {\r\n                          item.status === 'Pending' && (\r\n                            <a onClick={() => approveThemeplate(item.id, 'Reject')} href=\"#\" className=\"font-medium text-textPrimary dark:text-blue-500 hover:underline p-3\">\r\n                            Reject\r\n                            </a>\r\n                          )\r\n                        }\r\n                        {\r\n                          item.status === 'Approved' && (\r\n                            <a onClick={() => approveThemeplate(item.id, 'Disabled')} href=\"#\" className=\"font-medium text-textPrimary dark:text-blue-500 hover:underline p-3\">\r\n                            Disabled\r\n                            </a>\r\n                          )\r\n                        }\r\n                        {\r\n                          item.status === 'Disabled' && (\r\n                            <a onClick={() => approveThemeplate(item.id, 'Approved')} href=\"#\" className=\"font-medium text-textPrimary dark:text-blue-500 hover:underline p-3\">\r\n                            Enable\r\n                            </a>\r\n                          )\r\n                        }\r\n                        <a onClick={() => deleteThemeplate(item.id)} href=\"#\" className=\"font-medium text-red-500 dark:text-blue-500 hover:underline p-3\">\r\n                    Delete\r\n                        </a>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable react/display-name */\r\n// FileUploadComponent.jsx\r\nimport React, { useState, forwardRef, useImperativeHandle } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst FileUploadComponent = forwardRef((_props, ref) => {\r\n  const [file, setFile] = useState(null)\r\n\r\n  const handleFileChange = (event) => {\r\n    // Update the state when a file is selected\r\n    setFile(null)\r\n    const selectedFile = event.target.files[0]\r\n\r\n    if (selectedFile) {\r\n      const allowedFileTypes = [\r\n        'application/pdf',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' // Add xlsx file type\r\n      ]\r\n\r\n      if (allowedFileTypes.includes(selectedFile.type)) {\r\n        setFile(selectedFile)\r\n        _props.onFileSelect(selectedFile)\r\n      } else {\r\n        // File type is not allowed\r\n        alert('Please select a valid file type (PDF or DOCX)')\r\n        // Optionally, clear the file input value to prevent submitting the wrong file\r\n        event.target.value = null\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = async (docType) => {\r\n    if (file) {\r\n      const data = new FormData()\r\n      data.append('file', file)\r\n\r\n      const config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `http://13.213.6.180:8009/milestone/api/v1/file/upload/${docType}`, // Replace with your actual upload URL\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        data\r\n      }\r\n\r\n      try {\r\n        const response = await axios.request(config)\r\n        return response.data\r\n      } catch (error) {\r\n        // Handle the error as needed\r\n      }\r\n    }\r\n  }\r\n\r\n  // Expose the function to the parent component using useImperativeHandle\r\n  useImperativeHandle(ref, () => ({\r\n    handleSaveClick\r\n  }))\r\n\r\n  return (\r\n    <div className='flex-col gap-1 flex'>\r\n      {/* Input for file selection */}\r\n      <label>{_props.title}</label>\r\n      <input type=\"file\" required={_props.required} className='bg-yellow-200' onChange={handleFileChange} />\r\n      {/* Button to trigger file upload */}\r\n      {/* <button onClick={handleSaveClick}>Save</button> */}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default FileUploadComponent\r\n","import * as XLSX from 'xlsx'\r\n\r\nexport const ReadExcelData = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      const data = new Uint8Array(e.target.result)\r\n      const workbook = XLSX.read(data, { type: 'array', cellStyles: true })\r\n      const sheetName = workbook.SheetNames[0]\r\n      const sheet = workbook.Sheets[sheetName]\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: '' })\r\n\r\n      // Extract cell styles separately\r\n      const cellStyles = {}\r\n      const merges = sheet['!merges'] || []\r\n      for (const cellAddress in sheet) {\r\n        if (cellAddress !== '!ref') {\r\n          const cell = sheet[cellAddress]\r\n          if (cell && cell.s) {\r\n            cellStyles[cellAddress] = cell.s\r\n          }\r\n\r\n          // Handle merged cells\r\n          for (let i = 0; i < merges.length; i++) {\r\n            const mergeRange = merges[i]\r\n            if (\r\n              mergeRange.s.c <= cell.c &&\r\n              cell.c <= mergeRange.e.c &&\r\n              mergeRange.s.r <= cell.r &&\r\n              cell.r <= mergeRange.e.r\r\n            ) {\r\n              // Apply styles to all cells in merged range\r\n              for (let j = mergeRange.s.r; j <= mergeRange.e.r; j++) {\r\n                for (let k = mergeRange.s.c; k <= mergeRange.e.c; k++) {\r\n                  const mergedCellAddress = XLSX.utils.encode_cell({ r: j, c: k })\r\n                  cellStyles[mergedCellAddress] = cellStyles[cellAddress]\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      resolve({ jsonData, cellStyles })\r\n    }\r\n    reader.readAsArrayBuffer(file)\r\n  })\r\n}\r\n"],"names":["EditableCell","_ref","cell","value","row","index","column","id","maxWidth","updateData","editable","setEditable","useState","cellValue","setCellValue","textareaRef","useRef","useEffect","current","style","height","concat","scrollHeight","_jsx","className","ref","readOnly","onClick","handleDoubleClick","onBlur","handleBlur","onChange","e","target","resize","overflow","_ref3","columns","data","mergedCells","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","isMergedCell","rowIndex","columnId","some","start","end","_jsxs","border","children","map","_createElement","getRowProps","key","cells","columnIndex","getCellProps","backgroundColor","DeleteModal","handleConfirmDelete","handleCloseModal","type","PreviewModal","_ref2","handleDownloadFile","ext","path","file","FileViewer","fileType","filePath","href","SupplierAssessment","_themeplateData$data","excelData","setExcelData","excelHtml","setExcelHtml","cellStyles","setCellStyles","upload","setUpload","themeplateData","setThemeplateData","state","setState","fetchThemeplate","async","theme","httpClientRequest","get","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","Object","keys","Header","accessor","approveThemeplate","status","result","put","console","log","is_success","alert","message","FileUploadComponent","onFileSelect","ReadExcelData","jsonData","html","title","Table","newData","ws","XLSX","aoa_to_sheet","rowCount","cellAddress","encode_cell","r","c","wrapText","colWidths","_","width","wb","book_new","book_append_sheet","wbout","bookType","blob","Blob","formData","FormData","append","_response$data","response","axios","post","headers","filename","user","decryptFromStorage","JSON","stringify","user_id","themeplate","error","handleSave","scope","item","themplate","created_at","delete","deleteThemeplate","forwardRef","_props","setFile","handleSaveClick","config","method","maxBodyLength","Infinity","url","docType","request","useImperativeHandle","required","event","selectedFile","files","includes","Promise","resolve","reject","reader","FileReader","onload","workbook","sheetName","SheetNames","sheet","Sheets","sheet_to_json","header","defval","merges","mergeRange","j","k","readAsArrayBuffer"],"sourceRoot":""}